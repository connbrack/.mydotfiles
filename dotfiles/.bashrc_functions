
# vim: filetype=bash:

# ----------- custom funcitons --------------------------

mkcd ()
{
    mkdir -p -- "$1" &&
       cd -P -- "$1"
}

mkmv ()
{
    mkdir -p -- "$2" &&
    mv "$1 $2/"
}


lfcd () { 
  cd "$(command lf -print-last-dir "$@")"
}

copyf (){
  if [[ $# == 0 ]]; then
    xargs -d '\n' realpath | sed 's/.*/file:\/\/&/' | xclip -i -selection clipboard -t text/uri-list
  else
    printf "%s\n" "${@}" | xargs -d '\n' realpath | sed 's/.*/file:\/\/&/' | xclip -i -selection clipboard -t text/uri-list
  fi
}

chat() {
    local result=""
    for arg in "$@"; do
        result+="$arg "
    done
    tgpt "${result% }"
}

# ---------------------------------- fuzzy functions --------------------------------------

lff() {
    local selection

    selection=$(
        find -L ~/Documents ~/Apps/ ~/.mydotfiles \
          \( -name .git -o -name node_modules -o -name \.venv -o -name cache \) \
          -prune -o -type d -print 2>/dev/null \
          | fzf -e --prompt 'Main> ' \
            --header 'C-h: home' \
            --bind 'ctrl-h:reload(find ~/ -type d)' \
            --height=20 --layout=reverse --info=inline --margin=1 --padding=1 \
    )

    if [ -n "$selection" ]; then
        cd "$selection"
        lf
    fi
}


cdf() {
    local selection

    selection=$(
        find -L ~/Documents ~/Apps/ ~/.mydotfiles \
          \( -name .git -o -name node_modules -o -name venv -o -name cache \) \
          -prune -o -type d -print 2>/dev/null \
          | fzf -e --prompt 'Main> ' \
            --header 'C-h: home' \
            --bind 'ctrl-h:reload(find ~/ -type d)' \
            --height=20 --layout=reverse --info=inline --margin=1 --padding=1 \
    )

    if [ -n "$selection" ]; then
        cd "$selection"
    fi
}

ff() {
    local input_folder="${1:-}"

    local selection=$(
        find $input_folder \
          \( -name .git -o -name node_modules -o -name .venv -o -name cache \) -prune -o -print \
          | fzf -e --prompt '> ' \
            --bind 'ctrl-f:reload(find '$input_folder' \( -name .git -o -name node_modules -o -name .venv -o -name cache \) -prune -o -type f -print)' \
            --bind 'ctrl-d:reload(find '$input_folder' \( -name .git -o -name node_modules -o -name .venv -o -name cache \) -prune -o -type d -print)' \
            --height=20 --layout=reverse --info=inline --margin=1 --padding=1  --preview-window=up:1:wrap \
    )
    if [ -n "$selection" ]; then
        echo "$selection"
    fi
}

ff_inline() {
  path=$(echo "$READLINE_LINE" | grep -o '[^ ]*/$')
  cmd=$(echo "$READLINE_LINE" | sed 's/[^ ]*\/$//')

  #TODO: A better way handle path expansion?
  fixed_path=$(echo "$path" | sed "s|^~|$HOME|")

  fuzfind=$(ff $fixed_path)

  if [[ -n $fuzfind ]]; then
    READLINE_LINE="${cmd}${fuzfind}"
    READLINE_POINT=${#READLINE_LINE}
  fi
}
bind -x '"\C-f": ff_inline'

fh_inline() {
  local cmd=$(history | sed -E 's/ *[0-9]+ *//' | fzf --tac --reverse +s --tiebreak=index --height 20)
  if [[ -n $cmd ]]; then
    READLINE_LINE="$cmd"
    READLINE_POINT=${#READLINE_LINE}
  fi
}
bind -x '"\C-r": fh_inline'
